ðŸ§¹ Codebase Cleanup & Refactor Prompt

Your task is to clean and restructure this codebase while keeping the exact same functionality. The end goal is a project that is organized, consistent, and easy to maintain, while being configurable for deployment on Google Cloud Run.

Tasks
1. Baseline

Run the app and ensure it works as it does now.

Resolve any runtime errors, warnings, or broken references that show up, even if they seem minor.

2. Structure & Organization

Split the project into clear frontend/ (React) and backend/ (Python) directories.

Remove duplicate/conflicting files (e.g., multiple manifest.json, robots.txt, .env).

Ensure environment files exist separately for frontend and backend.

3. Cleanup

Remove unused files, variables, imports, and dead code while keeping all existing functionality.

Delete committed virtual environments, build artifacts, or other generated files.

Ensure dependencies in requirements.txt / package.json are accurate and contain only whatâ€™s actually used.

4. Consistency

Apply consistent naming conventions and folder structure so that components, utilities, pages, and configs are easy to locate.

Standardize formatting and style (use common tools like Prettier for frontend, Black/Flake8 for backend).

5. Deployment Readiness

Make the setup configurable for Google Cloud Run deployments.

Ensure Dockerfiles and config files (e.g., app.yaml, .gcloudignore) are clean and correct.

Verify environment variables can be injected cleanly for different environments (development, staging, production).

6. Testing & Verification

Organize test files under a clear structure (frontend/__tests__/, backend/tests/).

Ensure tests run successfully after cleanup.

Confirm the app still runs with the same functionality after refactoring.

Deliverable

A cleaned, refactored codebase that:

Runs as before, but without errors, unused code, or duplicate files.

Has a logical, consistent structure and naming convention.

Is ready for future development and can be deployed on Google Cloud Run with minimal configuration.